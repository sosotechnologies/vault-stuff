apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-script-configmap
data:
  script.sh: |
    set -eo pipefail
    export DEBIAN_FRONTEND=noninteractive
    apt-get update && apt-get install -y awscli jq
    mkdir -p ${WORKING_LOCATION}/${SECONDER_NAME}/${LOG_LOCATION}
    exec > >(tee -a ${WORKING_LOCATION}/${SECONDER_NAME}/${LOG_LOCATION}/${WORKFLOW_NAME}_setup_for_all_zones.log) 2>&1
    
    start_time=$(date -u +%s)
    echo "Syncing Pipeline config for zone folder" 
    aws s3 cp --region ${REGION} --no-progress s3://${SOSO_BUCKETED1}/${CONFIG_FILE} ${WORKING_LOCATION}/temp/${CONFIG_FILE}
    
    zone_folder=$(jq -r '.sliceExifOverrides.out' ${WORKING_LOCATION}/temp/${CONFIG_FILE})
    # sync all tiles for processing
    echo "${WORKFLOW_NAME} syncing S3 Pipeline Zones to S3 Working for ${SECONDER_NAME}:"
    aws s3 sync --region ${REGION} --no-progress s3://${SOSO_BUCKETED1}/$zone_folder s3://${SOSO_BUCKETED2}/${SECONDER_NAME}/$zone_folder
    end_time=$(date -u +%s)
    duration=$((end_time - start_time))
    formatted_duration=$(printf "%d:%02d:%02d" "$((duration / 3600))" "$(((duration % 3600) / 60))" "$((duration % 60))")
    echo setup-for-all-zones,, $(date +"%Y-%m-%d %H:%M:%S" -ud "@$start_time"), $(date +"%Y-%m-%d %H:%M:%S" -ud "@$end_time"), $formatted_duration >> ${WORKING_LOCATION}/${SECONDER_NAME}/${LOG_LOCATION}/${WORKFLOW_NAME}_times.csv

  env.sh: |
    export WORKFLOW_NAME="{{workflow.name}}"
    export SOSO_BUCKETED1="{{inputs.parameters.sosobucketed1}}"
    export SOSO_BUCKETED2="{{inputs.parameters.sosobucketed2}}"
    export REGION="{{inputs.parameters.region}}"
    export WORKING_LOCATION="{{inputs.parameters.workingLocation}}"
    export LOG_LOCATION="{{inputs.parameters.logLocation}}"
    export SECONDER_NAME="{{inputs.parameters.seconderName}}"
    export CONFIG_FILE="{{inputs.parameters.configFile}}"
